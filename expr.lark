%import common.INT -> INT
%import common.CNAME -> ID
%import common.WS

%ignore WS

_TRUE: "true"
_FALSE: "false"

?expr: "ifnz" expr "then" expr "else" expr -> ifnz
     | expr1

?expr1: expr2 "&&" expr2 -> andexpr
     | expr2 "||" expr2 -> orexpr
     | expr2

?expr2: expr3 "==" expr3 -> eqexpr
     | expr3 "<" expr3 -> lessexpr
     | expr3

?expr3: expr4 "+" expr4 -> plus
     | expr4 "-" expr4 -> minus
     | expr4

?expr4: term "*" factor -> times
     | term "/" factor -> divide
     | factor

?term: "!" factor -> notexpr
     | "-" factor -> neg
     | atom

?factor: _TRUE -> true
     | _FALSE -> false
     | ID -> id
     | INT -> int
     | atom "(" args ")" -> app
     | "(" expr ")"
     | "let" ID "=" expr "in" expr "end" -> let
     | "letfun" ID "(" params ")" "=" expr "in" expr "end" -> letfun

seqexp: "seq" expr "," expr
runexp: "run" expr

?args: (expr ("," expr)*)? -> args

?params: (ID ("," ID)*)? -> params

?atom: _TRUE -> true 
     | _FALSE -> false
     | ID  -> id
     | INT -> int
     | atom "(" args ")" -> app
     | "(" expr ")"    
     | "let" ID "=" expr "in" expr "end" -> let
     | "letfun" ID "(" params ")" "=" expr "in" expr "end" -> letfun

