%import common.INT -> INT
%import common.CNAME -> ID
%import common.WS

%ignore WS

_TRUE: "true"
_FALSE: "false"

?expr: expr ";" expr -> seqexp
     | ID ":=" expr -> assign
     | "if" expr "then" expr "else" expr -> ifnz
     | runexp
     | showexp
     | blurexp
     | invertexp
     | rotateexp
     | combineexp
     | lightenexp
     | darkenexp
     | expr1

?expr1: expr1 "&&" expr2 -> andexpr
     | expr1 "||" expr2 -> orexpr
     | expr2

?expr2: expr2 "==" expr3 -> eqexpr
     | expr2 "<" expr3 -> lessexpr
     | expr3

?expr3: "!" expr3 -> notexpr
     | expr3 "+" expr4 -> plus
     | expr3 "-" expr4 -> minus
     | expr4

?expr4: expr4 "*" expr5 -> times
     | expr4 "/" expr5 -> divide
     | expr5

?expr5: "-" expr5 -> neg
     | factor

?factor: _TRUE -> true
     | _FALSE -> false
     | ID -> id
     | INT -> int
     | atom

?atom: ID "(" args ")" -> app
     | "(" expr ")"
     | "let" ID "=" expr "in" expr "end" -> let
     | "letfun" ID "(" params ")" "=" expr "in" expr "end" -> letfun

runexp: "run" expr
showexp: "show" expr
blurexp: "blur" "(" expr ")"
invertexp: "invert" "(" expr ")"
rotateexp: "rotate" "(" expr ")"
combineexp: "combine" "(" expr "," expr ")"
lightenexp: "lighten" "(" expr ")"
darkenexp: "darken" "(" expr ")"

?args: (expr ("," expr)*)? -> args
?params: (ID ("," ID)*)? -> params

start: expr
