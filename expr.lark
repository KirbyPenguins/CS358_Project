%import common.INT -> INT
%import common.CNAME -> ID
%import common.WS

%ignore WS

_TRUE: "true"
_FALSE: "false"

?expr: runexp
     | blurexp
     | invertexp
     | rotateexp
     | combineexp
     | lightenexp
     | darkenexp
     | seqexp
     
?seqexp: expr0 ";" seqexp -> seqexp
     | expr0

?expr0: ID ":=" expr01 -> assign
     | expr01

?expr01: "ifnz" expror "then" expr "else" expr0 -> ifnz
     | showexp
     | expror

?expror: expror "||" exprand -> orexpr
     | exprand

?exprand: exprand "&&" exprnot -> andexpr
     | exprnot

?exprnot: "!" exprnot -> notexpr
     | expr1

?expr1: expr3 "==" expr3 -> eqexpr
     | expr3 "<" expr3 -> lessexpr
     | expr3

?expr3: expr3 "+" expr4 -> plus
     | expr3 "-" expr4 -> minus
     | expr4

?expr4: expr4 "*" expr5 -> times
     | expr4 "/" expr5 -> divide
     | expr5

?expr5: "-" expr5 -> neg
     | atom

?atom: ID -> id
     | INT -> int
     | _TRUE -> true
     | _FALSE -> false
     | atom "(" expr ")" -> app
     | "(" expr ")"
     | "let" ID "=" expr "in" expr "end" -> let
     | "letfun" ID "(" ID ")" "=" expr "in" expr "end" -> letfun

runexp: "run" expr
showexp: "show" expr0
blurexp: "blur" "(" expr ")"
invertexp: "invert" "(" expr ")"
rotateexp: "rotate" "(" expr ")"
combineexp: "combine" "(" expr "," expr ")"
lightenexp: "lighten" "(" expr ")"
darkenexp: "darken" "(" expr ")"



start: expr
